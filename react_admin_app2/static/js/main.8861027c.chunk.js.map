{"version":3,"sources":["MyUrlField.js","users.js","posts.js","Dashboard.js","authProvider.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","link","textDecoration","icon","width","paddingLeft","record","source","classes","href","className","UserList","props","List","Datagrid","rowClick","TextField","EmailField","PostTitle","title","PostList","ReferenceField","reference","EditButton","PostEdit","Edit","SimpleForm","DisabledInput","ReferenceInput","SelectInput","optionText","TextInput","LongTextInput","PostCreate","Create","type","params","AUTH_LOGIN","username","localStorage","setItem","Promise","resolve","AUTH_LOGOUT","removeItem","AUTH_ERROR","status","reject","AUTH_CHECK","getItem","dataProvider","jsonServerProvider","App","Admin","dashboard","Dashboard","authProvider","Resource","name","list","ListGuesser","edit","EditGuesser","create","PostIcon","UserIcon","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8861027c.chunk.js","sourcesContent":["// in src/MyUrlField.js\nimport React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport LaunchIcon from '@material-ui/icons/Launch';\n\nconst styles = {\n    link: {\n        textDecoration: 'none',\n    },\n    icon: {\n        width: '0.5em',\n        paddingLeft: 2,\n    },\n};\n\nconst MyUrlField = ({ record = {}, source, classes }) =>\n    <a href={record[source]} className={classes.link}>\n        {record[source]}\n        <LaunchIcon className={classes.icon} />\n    </a>;\n\nexport default withStyles(styles)(MyUrlField);\n","// in src/users.js\nimport React from 'react';\nimport { List, Datagrid, TextField, EmailField, UrlField } from 'react-admin';\nimport MyUrlField from './MyUrlField';\n\nexport const UserList = props => (\n    <List {...props}>\n        <Datagrid rowClick=\"edit\">\n            <TextField source=\"id\" />\n            <TextField source=\"name\" />\n            <TextField source=\"username\" />\n            <EmailField source=\"email\" />\n            <TextField source=\"address.street\" />\n            <TextField source=\"phone\" />\n            <MyUrlField source=\"website\" />\n            <TextField source=\"company.name\" />\n        </Datagrid>\n    </List>\n);\n","// in src/posts.js\nimport React from 'react';\nimport { List, Datagrid, TextField, ReferenceField, EditButton, Edit, Create } from 'react-admin';\nimport { SimpleForm, DisabledInput, ReferenceInput, SelectInput, TextInput, LongTextInput } from 'react-admin';\n\nconst PostTitle = ({ record }) => {\n    return <span>Post {record ? `\"${record.title}\"` : ''}</span>;\n};\n\nexport const PostList = props => (\n    <List {...props}>\n       <Datagrid>\n           <TextField source=\"id\" />\n            <ReferenceField source=\"userId\" reference=\"users\">\n                <TextField source=\"name\" />\n            </ReferenceField>\n            <TextField source=\"id\" />\n            <TextField source=\"title\" />\n            <TextField source=\"body\" />\n            <EditButton />\n        </Datagrid>\n    </List>\n);\n\n\nexport const PostEdit = props => (\n    <Edit title={<PostTitle />} {...props}>\n        <SimpleForm>\n           <DisabledInput source=\"id\" />\n            <ReferenceInput source=\"userId\" reference=\"users\">\n               <SelectInput optionText=\"name\" />\n            </ReferenceInput>\n            <TextInput source=\"title\" />\n           <LongTextInput source=\"body\" />\n        </SimpleForm>\n    </Edit>\n);\n\n\nexport const PostCreate = props => (\n    <Create {...props}>\n        <SimpleForm>\n            <ReferenceInput source=\"userId\" reference=\"users\">\n                <SelectInput optionText=\"name\" />\n            </ReferenceInput>\n            <TextInput source=\"title\" />\n            <LongTextInput source=\"body\" />\n        </SimpleForm>\n    </Create>\n);\n","// in src/Dashboard.js\nimport React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\n\nexport default () => (\n    <Card>\n        <CardHeader title=\"Welcome to the administration\" />\n        <CardContent>Lorem ipsum sic dolor amet...</CardContent>\n    </Card>\n);\n","// in src/authProvider.js\nimport { AUTH_LOGIN, AUTH_LOGOUT, AUTH_ERROR, AUTH_CHECK } from 'react-admin';\n\nexport default (type, params) => {\n    // called when the user attempts to log in\n    if (type === AUTH_LOGIN) {\n        const { username } = params;\n        localStorage.setItem('username', username);\n        // accept all username/password combinations\n        return Promise.resolve();\n    }\n    // called when the user clicks on the logout button\n    if (type === AUTH_LOGOUT) {\n        localStorage.removeItem('username');\n        return Promise.resolve();\n    }\n    // called when the API returns an error\n    if (type === AUTH_ERROR) {\n        const { status } = params;\n        if (status === 401 || status === 403) {\n            localStorage.removeItem('username');\n            return Promise.reject();\n        }\n        return Promise.resolve();\n    }\n    // called when the user navigates to a new location\n    if (type === AUTH_CHECK) {\n        return localStorage.getItem('username')\n            ? Promise.resolve()\n            : Promise.reject();\n    }\n    return Promise.reject('Unknown method');\n};\n","// in src/App.js\nimport React from 'react';\nimport { Admin, Resource, ListGuesser, EditGuesser } from 'react-admin';\nimport { UserList } from './users';\nimport { PostList, PostEdit, PostCreate } from './posts';\nimport jsonServerProvider from 'ra-data-json-server';\nimport PostIcon from '@material-ui/icons/Book';\nimport UserIcon from '@material-ui/icons/Group';\nimport Dashboard from './Dashboard';\nimport authProvider from './authProvider';\n\nconst dataProvider = jsonServerProvider('https://jsonplaceholder.typicode.com');\n\nconst App = () => (\n    <Admin dashboard={Dashboard} authProvider={authProvider} dataProvider={dataProvider}>\n        <Resource name=\"posts_1\" list={ListGuesser} />\n        <Resource name=\"posts_2\" list={PostList} edit={EditGuesser} />\n        <Resource name=\"posts\" list={PostList} edit={PostEdit} create={PostCreate} icon={PostIcon}/>\n        <Resource name=\"users\" list={UserList} icon={UserIcon}/>\n    </Admin>\n);\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}